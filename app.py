from flask import Flask, jsonify, render_template, url_for, requestfrom flask_login import UserMixin, LoginManager, login_required, login_user, logout_user, current_userfrom flask_mongoengine import MongoEngine, DoesNotExistfrom settings import db,appfrom models import User, Task, Workout, Statsimport bcryptfrom uuid import uuid4import osimport datetimeimport math# now get all the models from models.py ( this can be inside app.py)# am just making it in models.py for readbilitylogin_manager = LoginManager()login_manager.init_app(app)@login_manager.user_loaderdef load_user(user):	return User.objects.get(id=user)# ------------------------------------------------------------------------------------# 										Flask Login ends# ------------------------------------------------------------------------------------@app.route("/")def index():		try:		user = User.objects.get(id=current_user.id)		return render_template('home.html', username = current_user.username)	except (AttributeError, DoesNotExist):				return render_template('index.html', username = False)@app.route("/login_page")def login_page():		try:		user = User.objects.get(id=current_user.id)		return render_template('home.html', username = current_user.username)	except (AttributeError, DoesNotExist):				return render_template('login.html', username = False)@app.route("/login", methods=['POST'])def login():	params = request.get_json()	try:		user = User.objects.get(email=params['loginmail'])		if user.validate_login(user.password, params['loginpw']):			user_obj = User.objects.get(id=user.id)			login_user(user_obj)			return jsonify({'status': True,"msg":"Erfolgreich"})	except DoesNotExist:		return jsonify({'status': False,"msg":"pw oder email falsch"})	@app.route("/signup", methods=['POST'])def signup():	params = request.get_json()	try:		data = User.objects.get(email=params['email'])		return jsonify({'status': False,"msg": "User exesteirt bereits"})	except DoesNotExist:		hashed_pass = bcrypt.hashpw(str(params['password']).encode('utf-8'), bcrypt.gensalt())		user_obj = User(username = params['name'], email=params['email'])				user_obj.set_password(params['password'])		user_obj.save()	return jsonify({'status':True,"msg":"Erfolgreich angemeldet"})@app.route("/logout")def logout():	logout_user()	return render_template('index.html', username = False)@app.route("/rezept")@login_requireddef ernaehrung():	return render_template('rezepte.html', username = False)@app.route("/rezept_selected")@login_requireddef ernaehrung_selected():	return render_template('rezept_selected.html', username = False)@app.route("/unser_paarfit")@login_requireddef unser_paarfit():	return render_template('unser_paarfit.html', username = False)@app.route("/training")@login_requireddef training():	return render_template('training.html', username = False)# Load Workouts TASKS@app.route("/tasks", methods=['GET'])@login_requireddef get_tasks():	try:		return_list = []		all_workouts = Workout.objects(user = current_user.id).order_by('-created_at')		latest_workout = all_workouts.first()		workouts_this_week = all_workouts[0:latest_workout.workout_nr]		print(workouts_this_week)		for i in workouts_this_week:			workout_struct = {			"workout_nr": i.workout_nr,			"week_nr":i.week_nr,			"absolviert_am":i.created_at			}			return_list.append(workout_struct)		return jsonify({'status':True,'workouts':return_list})	except Exception as e:		return jsonify({'status':False})# Load Workouts TASKS@app.route("/stats", methods=['GET'])@login_requireddef get_stats():	try:				all_stats = Stats.objects(user = current_user.id).first()		workout_struct = {		"perfektewoche": all_stats.perfektewoche,		"trainingseinheiten":all_stats.trainingseinheiten,		"trainingswochen":all_stats.trainingswochen		}					return jsonify({'status':True,'stats':workout_struct})	except Exception as e:		return jsonify({'status':False})# ------------------------------------------------------------------------------------------------# 										TASK CRUDs# ------------------------------------------------------------------------------------------------# CREATE new Workout@app.route("/save_workout", methods=['POST'])@login_requireddef save_new_workout():	first_workout = False	workout_nr = 0	workout_week = 0	alleworkouts = Workout.objects(user=current_user.id).order_by('-created_at')	print(alleworkouts)	if alleworkouts.first() == None:		first_workout =True		try:			stats_obj = Stats()			stats_obj.user = User.objects.get(id=current_user.id)			stats_obj.perfektewoche = 0			stats_obj.trainingseinheiten = 1			stats_obj.trainingswochen = 0			stats_obj.save()					except Exception as e:			print(e)	if first_workout == True:		workout_nr =1		workout_week = 1	else:		workout_nr, workout_week = calculate_workout_nr(alleworkouts)	if workout_nr > 3:		print("Max workout zahl erreicht")	else:		try:			workout_obj = Workout()			workout_obj.user = User.objects.get(id=current_user.id)			workout_obj.workout_nr = workout_nr			workout_obj.week_nr = workout_week			workout_obj.workout_id = str(uuid4())			workout_obj.save()			return jsonify({'status':True})		except Exception as e:			return jsonify({'status':False})def calculate_workout_nr(alleworkouts):	print("ich bin in calculate workout")	maxworkout_in_week = 3	perfekte_woche = False	last_workout = alleworkouts.first()	print(last_workout.workout_nr)	first_workout_ofthe_week = alleworkouts[last_workout.workout_nr-1]	time_since_first_workout = (datetime.datetime.now() - first_workout_ofthe_week.created_at).days	if time_since_first_workout<=7 and last_workout.workout_nr<maxworkout_in_week-1:		last_workout.workout_nr +=1	elif time_since_first_workout> 7 and last_workout.workout_nr<maxworkout_in_week-1:		last_workout.workout_nr +=1	elif time_since_first_workout<=7 and last_workout.workout_nr==maxworkout_in_week-1:		print("elif gleich max")		last_workout.workout_nr +=1		perfekte_woche = True	elif time_since_first_workout>7 and last_workout.workout_nr>=maxworkout_in_week-1:		last_workout.week_nr +=1		last_workout.workout_nr =1	elif time_since_first_workout<7 and last_workout.workout_nr==maxworkout_in_week:		last_workout.workout_nr +=1	print(perfekte_woche)	try:		stats_obj = Stats.objects.get(user = current_user.id)		if perfekte_woche == True:			print("bin in der PerfektenWoche")			stats_obj.perfektewoche = stats_obj.perfektewoche +1		else:			stats_obj.perfektewoche = stats_obj.perfektewoche		stats_obj.trainingseinheiten = stats_obj.trainingseinheiten +1		stats_obj.trainingswochen = last_workout.week_nr		stats_obj.save()	except Exception as e:		print(e)	return last_workout.workout_nr, last_workout.week_nrif __name__ == '__main__':	app.config['TEMPLATES_AUTO_RELOAD'] = True	app.run(host='0.0.0.0', port=int(os.environ.get('PORT',5000)))